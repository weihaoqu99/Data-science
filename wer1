# =========================
# Whisper ASR fine-tuning (minimal changes)
# =========================
import os, glob, pathlib
os.environ["CUDA_VISIBLE_DEVICES"] = "0,1,2,3"

from typing import Any, Dict, List, Union
from dataclasses import dataclass

import torch
import evaluate
from datasets import Dataset, Audio
from transformers import (
    WhisperProcessor,
    WhisperForConditionalGeneration,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
)

# -------------------------
# Paths (match your setup)
# -------------------------
AUDIO_GLOB  = "/appdata/cortex/dev1/origAudio/*.mp3"
WHISPER_LOC = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"  # your local base
OUTPUT_DIR  = "/appdata/cortex/dev1/shob/ASR_model/checkpoints/whisper_run1"
pathlib.Path(OUTPUT_DIR).mkdir(parents=True, exist_ok=True)

# -------------------------
# Build dataset from filenames
# -------------------------
audio_files = sorted(glob.glob(AUDIO_GLOB))
if not audio_files:
    raise FileNotFoundError(f"No MP3 files found for: {AUDIO_GLOB}")

def retrieve_transcript(input_str: str) -> str:
    base = os.path.splitext(os.path.basename(input_str))[0]
    tmp = base.replace("_", " ").replace(".", " ")
    tmp = tmp.replace("shell", "she'll").replace("dont", "don't")
    if tmp:
        tmp = tmp[0].upper() + tmp[1:]
    tmp = tmp.replace(" i ", " I ")
    return tmp.strip()

transcripts = [retrieve_transcript(s) for s in audio_files]

raw_datasets = Dataset.from_dict({
    "audio": audio_files,
    "sentence": transcripts
}).cast_column("audio", Audio(sampling_rate=16_000))

raw_datasets = raw_datasets.train_test_split(test_size=0.15, seed=91)
print(raw_datasets)

# -------------------------
# Processor & model
# -------------------------
processor = WhisperProcessor.from_pretrained(WHISPER_LOC, language="English", task="transcribe")
model = WhisperForConditionalGeneration.from_pretrained(WHISPER_LOC)

# keep your config fixes
model.config.forced_decoder_ids = None
model.config.suppress_tokens = []
model.config.use_cache = False          # for grad ckpt
model.config.language = "english"
model.config.task = "transcribe"

# -------------------------
# Vectorization
# (FIX: no walrus operator; assign first)
# -------------------------
def prepare_dataset(batch):
    audio = batch["audio"]
    audio_array = audio["array"]                 # ← was: audio=array := audio["array"]
    sr = audio["sampling_rate"]
    batch["input_features"] = processor.feature_extractor(
        audio=audio_array,
        sampling_rate=sr
    ).input_features[0]
    transcription = batch["sentence"]
    batch["labels"] = processor.tokenizer(transcription).input_ids
    return batch

vectorized_datasets = raw_datasets.map(
    prepare_dataset,
    remove_columns=raw_datasets["train"].column_names,
    num_proc=8
)

# -------------------------
# Data collator (same as yours)
# -------------------------
@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int
    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_features = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(input_features, return_tensors="pt")
        label_features = [{"input_ids": f["labels"]} for f in features]
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")
        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)
        if labels.shape[1] > 0 and labels[0,0].item() == self.decoder_start_token_id:
            labels = labels[:,1:]
        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor,
    decoder_start_token_id=model.config.decoder_start_token_id,
)

# -------------------------
# Metrics
# -------------------------
metric = evaluate.load("wer")
def compute_metrics(pred):
    pred_ids  = pred.predictions
    label_ids = pred.label_ids
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id
    pred_str  = processor.tokenizer.batch_decode(pred_ids,  skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)
    wer = 100.0 * metric.compute(predictions=pred_str, references=label_str)
    return {"wer": float(wer)}

# -------------------------
# Training arguments
# (MINIMAL changes to avoid the step-500 save crash)
# -------------------------
training_args = Seq2SeqTrainingArguments(
    output_dir=OUTPUT_DIR,
    overwrite_output_dir=True,

    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    gradient_accumulation_steps=8,

    learning_rate=1e-5,
    warmup_steps=500,
    max_steps=1000,
    seed=91,

    fp16=True,
    gradient_checkpointing=True,
    predict_with_generate=True,
    generation_max_length=225,

    evaluation_strategy="steps",
    eval_steps=50,
    logging_steps=50,
    report_to=["none"],

    # ---- critical save tweaks ----
    save_strategy="epoch",          # save once per epoch (not every few steps)
    save_total_limit=1,             # keep only the latest checkpoint
    load_best_model_at_end=False,   # avoids extra copies
    save_safetensors=True,

    dataloader_num_workers=8,
    dataloader_prefetch_factor=2,
    metric_for_best_model="wer",
    greater_is_better=False,
)

# -------------------------
# Trainer (minimal change: use Adafactor for tiny optimizer state)
# -------------------------
trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    tokenizer=processor,
    compute_metrics=compute_metrics,
    optim="adafactor",   # <<< keeps checkpoints tiny; reduces disk writes
)

# -------------------------
# Train + save
# -------------------------
train_result = trainer.train()
print(train_result)

FINAL_DIR = os.path.join(OUTPUT_DIR, "final")
pathlib.Path(FINAL_DIR).mkdir(parents=True, exist_ok=True)
trainer.save_model(FINAL_DIR)
processor.save_pretrained(FINAL_DIR)
print(f"[done] Saved model + processor to: {FINAL_DIR}")