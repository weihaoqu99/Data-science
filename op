# ================================
# OPTUNA: hyperparameter search
# (paste AFTER compute_metrics)
# ================================
import json, numpy as np, optuna, torch
from pathlib import Path
from dataclasses import dataclass
from typing import Any, Dict, List, Union
from transformers import (
    Seq2SeqTrainingArguments, Seq2SeqTrainer, TrainerCallback,
    WhisperForConditionalGeneration
)

SAVE_ROOT = Path("/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/optuna_run1")
SAVE_ROOT.mkdir(parents=True, exist_ok=True)

# --- ensure Whisper has a valid decoder start token & no forced IDs ---
def ensure_whisper_start_tokens(model, processor):
    tok = processor.tokenizer
    try:
        start = tok.convert_tokens_to_ids("<|startoftranscript|>")
    except Exception:
        start = None
    if start is None or start == getattr(tok, "unk_token_id", -999999):
        start = tok.bos_token_id
    if model.config.decoder_start_token_id is None:
        model.config.decoder_start_token_id = start
    if getattr(model, "generation_config", None) is not None:
        model.generation_config.decoder_start_token_id = start
        model.generation_config.forced_decoder_ids = None
        model.generation_config.suppress_tokens = []
    model.config.forced_decoder_ids = None
    model.config.suppress_tokens = []

# --- collator that ALSO builds decoder_input_ids (avoids forward error) ---
@dataclass
class DataCollatorSpeechSeq2SeqWithPaddingOpt:
    processor: Any
    decoder_start_token_id: int
    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_feats = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(input_feats, return_tensors="pt")

        label_feats = [{"input_ids": f["labels"]} for f in features]
        labels_batch = self.processor.tokenizer.pad(label_feats, return_tensors="pt")
        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)

        # build decoder_input_ids = shift-right(labels) with start token
        pad_id = self.processor.tokenizer.pad_token_id
        dec_in = labels.clone()
        dec_in[dec_in == -100] = pad_id
        dec_in = torch.cat(
            [torch.full((dec_in.size(0), 1), self.decoder_start_token_id, dtype=dec_in.dtype), dec_in[:, :-1]],
            dim=1
        )

        batch["labels"] = labels
        batch["decoder_input_ids"] = dec_in
        return batch

# --- Optuna pruning callback (on eval WER) ---
class OptunaPruningCallback(TrainerCallback):
    def __init__(self, trial: optuna.trial.Trial, metric_name: str = "eval_wer"):
        self.trial = trial
        self.metric_name = metric_name
    def on_evaluate(self, args, state, control, metrics, **kwargs):
        if self.metric_name in metrics:
            step = int(state.global_step)
            value = float(metrics[self.metric_name])
            self.trial.report(value, step=step)
            if self.trial.should_prune():
                raise optuna.TrialPruned(f"Pruned at step {step} with {self.metric_name}={value:.4f}")

# --- training args search space ---
def build_args(trial: optuna.trial.Trial) -> Seq2SeqTrainingArguments:
    lr        = trial.suggest_float("learning_rate", 1e-6, 5e-5, log=True)
    train_bs  = trial.suggest_categorical("per_device_train_batch_size", [2, 4, 8])
    grad_acc  = trial.suggest_categorical("gradient_accumulation_steps", [2, 4, 8, 16])
    max_steps = trial.suggest_int("max_steps", 300, 1200, step=100)
    warmup    = trial.suggest_float("warmup_ratio", 0.0, 0.3)
    smooth    = trial.suggest_float("label_smoothing_factor", 0.0, 0.2)
    gen_len   = trial.suggest_int("generation_max_length", 128, 256, step=16)
    every     = trial.suggest_categorical("eval_steps", [25, 50, 100])

    return Seq2SeqTrainingArguments(
        output_dir=str(SAVE_ROOT / f"trial_{trial.number}"),
        per_device_train_batch_size=train_bs,
        per_device_eval_batch_size=4,
        gradient_accumulation_steps=grad_acc,
        learning_rate=lr,
        warmup_ratio=warmup,
        max_steps=max_steps,
        label_smoothing_factor=smooth,
        gradient_checkpointing=True,
        fp16=True,
        evaluation_strategy="steps",
        predict_with_generate=True,
        generation_max_length=gen_len,
        seed=91,
        logging_steps=every,
        eval_steps=every,
        save_strategy="steps",          # keep checkpoints so load_best_model_at_end can work
        save_steps=every,
        save_total_limit=1,
        report_to=["none"],
        load_best_model_at_end=True,
        metric_for_best_model="wer",
        greater_is_better=False,
        dataloader_num_workers=8,
        dataloader_prefetch_factor=2,
        push_to_hub=False,
        # critical: avoid optimizer zipfile save crash
        save_only_model=True,
        save_safetensors=True,
    )

# --- objective: train small model per trial, return WER ---
def objective(trial: optuna.trial.Trial) -> float:
    model_t = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
    model_t.config.use_cache = False
    ensure_whisper_start_tokens(model_t, processor)

    collator_t = DataCollatorSpeechSeq2SeqWithPaddingOpt(
        processor=processor,
        decoder_start_token_id=model_t.config.decoder_start_token_id
    )
    args_t = build_args(trial)

    trainer_t = Seq2SeqTrainer(
        args=args_t,
        model=model_t,
        train_dataset=vectorized_datasets["train"],
        eval_dataset=vectorized_datasets["test"],
        data_collator=collator_t,
        compute_metrics=compute_metrics,
        tokenizer=processor,
        callbacks=[OptunaPruningCallback(trial, metric_name="eval_wer")],
    )

    trainer_t.train()
    eval_metrics = trainer_t.evaluate()
    wer = float(eval_metrics.get("eval_wer", np.inf))

    # persist artifacts for this trial
    out_dir = SAVE_ROOT / f"trial_{trial.number}"
    out_dir.mkdir(parents=True, exist_ok=True)
    with open(out_dir / "metrics.json", "w") as f:
        json.dump({k: float(v) for k, v in eval_metrics.items()}, f, indent=2)
    trainer_t.save_model(out_dir / "model")    # model-only save (no optimizer)
    try:
        processor.save_pretrained(out_dir / "model")
    except Exception:
        pass

    return wer

# --- run Optuna study ---
sampler = optuna.samplers.TPESampler(seed=91, multivariate=True, group=True)
pruner  = optuna.pruners.MedianPruner(n_warmup_steps=2)

study = optuna.create_study(
    study_name="whisper_distil_optuna_wer",
    direction="minimize",
    sampler=sampler,
    pruner=pruner,
    storage=f"sqlite:///{SAVE_ROOT}/optuna_whisper.db",
    load_if_exists=True,
)

N_TRIALS = 8
study.optimize(objective, n_trials=N_TRIALS, gc_after_trial=True)
print("Best WER:", study.best_value)
print("Best params:", study.best_params)

# --- final training with best params on full data & save ---
from optuna.trial import FixedTrial

best_args = build_args(FixedTrial(study.best_params))
best_args.output_dir = str(SAVE_ROOT / "final_best")

final_model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
final_model.config.use_cache = False
ensure_whisper_start_tokens(final_model, processor)

collator_final = DataCollatorSpeechSeq2SeqWithPaddingOpt(
    processor=processor,
    decoder_start_token_id=final_model.config.decoder_start_token_id
)

final_trainer = Seq2SeqTrainer(
    args=best_args,
    model=final_model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=collator_final,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

final_trainer.train()
FINAL_DIR = "/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/whisper_finetuning_Optuna_v1"
final_trainer.save_model(FINAL_DIR)
processor.save_pretrained(FINAL_DIR)
print("Saved final best model to:", FINAL_DIR)