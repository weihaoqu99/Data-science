import optuna
from transformers import Seq2SeqTrainingArguments, Seq2SeqTrainer, TrainerCallback

SAVE_ROOT = Path("/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/optuna_fast")
SAVE_ROOT.mkdir(parents=True, exist_ok=True)

# speed knobs
N_TRIALS        = 3
SUBSET_FRAC     = 0.20
MAX_STEPS_TRIAL = 200
EVAL_STEPS      = 100
GEN_MAX_LEN     = 96
SAVE_DURING     = False  # no checkpointing inside trials

def subset_split(dsets, frac: float):
    n_tr = max(1, int(len(dsets["train"]) * frac))
    n_te = max(1, int(len(dsets["test"])  * frac))
    return {
        "train": dsets["train"].select(range(n_tr)),
        "test":  dsets["test"].select(range(n_te)),
    }

trial_datasets = subset_split(vectorized_datasets, SUBSET_FRAC)

class OptunaPruningCallback(TrainerCallback):
    def __init__(self, trial: optuna.trial.Trial, metric_name: str = "eval_wer"):
        self.trial = trial; self.metric_name = metric_name
    def on_evaluate(self, args, state, control, metrics, **kwargs):
        if self.metric_name in metrics:
            self.trial.report(float(metrics[self.metric_name]), step=int(state.global_step))
            if self.trial.should_prune():
                raise optuna.TrialPruned()

def build_args(trial: optuna.trial.Trial) -> Seq2SeqTrainingArguments:
    lr       = trial.suggest_float("learning_rate", 1e-6, 2e-5, log=True)
    train_bs = trial.suggest_categorical("per_device_train_batch_size", [2, 4])
    grad_acc = trial.suggest_categorical("gradient_accumulation_steps", [2, 4])
    return Seq2SeqTrainingArguments(
        output_dir=str(SAVE_ROOT / f"trial_{trial.number}"),
        per_device_train_batch_size=train_bs,
        per_device_eval_batch_size=4,
        gradient_accumulation_steps=grad_acc,
        learning_rate=lr,
        warmup_ratio=0.05,
        max_steps=MAX_STEPS_TRIAL,
        label_smoothing_factor=0.05,
        gradient_checkpointing=True,
        fp16=True,
        evaluation_strategy="steps",
        predict_with_generate=True,
        generation_max_length=GEN_MAX_LEN,
        generation_num_beams=1,
        seed=91,
        logging_steps=EVAL_STEPS,
        eval_steps=EVAL_STEPS,
        save_strategy="no" if not SAVE_DURING else "steps",
        save_total_limit=1,
        report_to=["none"],
        load_best_model_at_end=False,
        metric_for_best_model="wer",
        greater_is_better=False,
        dataloader_num_workers=8,
        dataloader_prefetch_factor=2,
        push_to_hub=False,
        save_only_model=True,
        save_safetensors=True,
    )

def objective(trial: optuna.trial.Trial) -> float:
    model_t = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
    ensure_whisper_start_tokens(model_t, processor)

    collator_t = DataCollatorSpeechSeq2SeqWithPadding(
        processor=processor,
        decoder_start_token_id=model_t.config.decoder_start_token_id
    )
    args_t = build_args(trial)

    trainer_t = Seq2SeqTrainer(
        args=args_t,
        model=model_t,
        train_dataset=trial_datasets["train"],
        eval_dataset=trial_datasets["test"],
        data_collator=collator_t,
        compute_metrics=compute_metrics,
        tokenizer=processor,
        callbacks=[OptunaPruningCallback(trial, "eval_wer")],
    )

    trainer_t.train()
    eval_metrics = trainer_t.evaluate()
    return float(eval_metrics.get("eval_wer", 9e9))

sampler = optuna.samplers.TPESampler(seed=91, multivariate=True, group=True)
pruner  = optuna.pruners.MedianPruner(n_warmup_steps=1)
study = optuna.create_study(direction="minimize", sampler=sampler, pruner=pruner,
                            study_name="whisper_fast_optuna_wer")
study.optimize(objective, n_trials=N_TRIALS, gc_after_trial=True)
print("FAST Best WER:", study.best_value)
print("FAST Best params:", study.best_params)

# ============================================
# 8) Final train on FULL data using best params
# ============================================
from optuna.trial import FixedTrial

best_args = build_args(FixedTrial(study.best_params))
FINAL_DIR = "/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/whisper_finetuning_Optuna_v1"
best_args.output_dir = FINAL_DIR
best_args.save_strategy = "steps"
best_args.eval_steps    = 200
best_args.logging_steps = 200
best_args.max_steps     = 800           # you can raise this for better quality
best_args.load_best_model_at_end = True
best_args.metric_for_best_model = "wer"
best_args.greater_is_better     = False

final_model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
ensure_whisper_start_tokens(final_model, processor)

final_trainer = Seq2SeqTrainer(
    args=best_args,
    model=final_model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

final_trainer.train()
final_trainer.save_model(FINAL_DIR)
processor.save_pretrained(FINAL_DIR)
print("Saved final model to:", FINAL_DIR)