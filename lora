import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0,1,2,3"

# ===== accelerate hot-patch (needed on older accelerate versions) =====  # NEW
import sys, types  # NEW
def _safe_clear_device_cache():  # NEW
    try:  # NEW
        import torch  # NEW
        if torch.cuda.is_available():  # NEW
            torch.cuda.empty_cache()  # NEW
            try: torch.cuda.ipc_collect()  # NEW
            except Exception: pass  # NEW
    except Exception: pass  # NEW
try:  # NEW
    import accelerate.utils.memory as _acc_mem  # NEW
    if not hasattr(_acc_mem, "clear_device_cache"):  # NEW
        _acc_mem.clear_device_cache = _safe_clear_device_cache  # NEW
        print("Patched accelerate.utils.memory.clear_device_cache")  # NEW
except Exception:  # NEW
    mem_mod = types.ModuleType("accelerate.utils.memory")  # NEW
    mem_mod.clear_device_cache = _safe_clear_device_cache  # NEW
    sys.modules["accelerate.utils.memory"] = mem_mod  # NEW
    print("Injected accelerate.utils.memory module with clear_device_cache")  # NEW
# ======================================================================  # NEW

from datasets import Dataset, Audio
import glob

audio_files = glob.glob("/appdata/cortex/dev1/origAudio/*.mp3")

def retrieve_transcript(input_str: str) -> str:
    tmp = input_str[input_str.find('/')+1:-4]  # strip out track number and .mp3 suffix
    tmp = tmp.replace('_', ' ')
    tmp = tmp.replace('.', ' ')
    tmp = tmp.replace("shell", "she'll")
    tmp = tmp.replace("dont", "don't")
    tmp = tmp.capitalize()
    tmp = tmp.replace('i ', 'I ')
    return tmp

transcripts = [retrieve_transcript(s) for s in audio_files]

# need to adjust sampling rate if necessary
num_samples = len(audio_files)

raw_datasets = Dataset.from_dict({
    "audio": audio_files[:num_samples],
    "sentence": transcripts[:num_samples]
}).cast_column("audio", Audio(sampling_rate=16_000))
raw_datasets = raw_datasets.train_test_split(test_size=0.15, seed=91)

from transformers import WhisperProcessor

whisper_loc = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"
processor = WhisperProcessor.from_pretrained(whisper_loc, language="English", task="transcribe")

def prepare_dataset(batch):
    # load and resample audio data to 16kHz
    audio = batch["audio"]
    batch["input_features"] = processor.feature_extractor(
        audio["array"], sampling_rate=audio["sampling_rate"]
    ).input_features[0]

    # encode target text
    transcription = batch["sentence"]
    batch["labels"] = processor.tokenizer(transcription).input_ids
    return batch

vectorized_datasets = raw_datasets.map(
    prepare_dataset, remove_columns=raw_datasets.column_names["train"], num_proc=8
)

from transformers import WhisperForConditionalGeneration

model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
model.config.forced_decoder_ids = None
model.config.suppress_tokens = []
model.config.use_cache = False
model.config.language = "english"
model.config.task = "transcribe"

# ----- decoder start-token safety (helps training/generation) -----      # NEW
tok = processor.tokenizer  # NEW
start_id = tok.convert_tokens_to_ids("<|startoftranscript|>")  # NEW
if start_id is None or (hasattr(tok, "unk_token_id") and start_id == tok.unk_token_id):  # NEW
    start_id = tok.bos_token_id  # NEW
if model.config.decoder_start_token_id is None:  # NEW
    model.config.decoder_start_token_id = start_id  # NEW
# -----------------------------------------------------------------      # NEW

# -------------------- LoRA: r=64, alpha=32 ----------------------------- # NEW
from peft import LoraConfig, get_peft_model  # NEW

lora_cfg = LoraConfig(                 # NEW
    r=64,                              # NEW
    lora_alpha=32,                     # NEW
    lora_dropout=0.0,                  # NEW  (use 0.05 if you want dropout)
    bias="none",                       # NEW
    task_type="SEQ_2_SEQ_LM",          # NEW
    target_modules=["q_proj","k_proj","v_proj","out_proj","fc1","fc2"]  # NEW
)                                      # NEW
model = get_peft_model(model, lora_cfg)           # NEW
model.print_trainable_parameters()                 # NEW
# ---------------------------------------------------------------------  # NEW

import torch
from dataclasses import dataclass
from typing import Any, Dict, List, Union

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_features = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(input_features, return_tensors="pt")

        label_features = [{"input_ids": f["labels"]} for f in features]
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")

        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)

        if (labels[:, 0] == self.decoder_start_token_id).all().cpu().item():
            labels = labels[:, 1:]

        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor, decoder_start_token_id=model.config.decoder_start_token_id
)

import evaluate
metric = evaluate.load("wer")
print("WER metric loaded successfully!")

def compute_metrics(pred):
    pred_ids = pred.predictions
    label_ids = pred.label_ids
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id

    pred_str = processor.tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)

    wer = 100 * metric.compute(predictions=pred_str, references=label_str)
    return {"wer": wer}

from transformers import Seq2SeqTrainingArguments

training_args = Seq2SeqTrainingArguments(
    output_dir="./",
    per_device_train_batch_size=4,
    gradient_accumulation_steps=8,
    learning_rate=1e-5,
    warmup_steps=500,
    max_steps=1000,
    gradient_checkpointing=True,
    fp16=True,
    evaluation_strategy="steps",
    per_device_eval_batch_size=4,
    predict_with_generate=True,
    generation_max_length=225,
    seed=91,
    logging_steps=5,
    eval_steps=5,
    save_strategy="steps",
    save_steps=5,
    save_total_limit=2,
    report_to=["none"],
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    push_to_hub=False,
    dataloader_num_workers=8,
    dataloader_prefetch_factor=2,
)

from transformers import Seq2SeqTrainer

trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,                           # NEW: PEFT (LoRA) model
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

trainer.train()

# (optional) different save path to avoid overwriting a non-LoRA run        # CHANGED
save_dir = "/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/whisper_finetuning_v1_lora64a32"  # CHANGED
trainer.save_model(save_dir)    # CHANGED
processor.save_pretrained(save_dir)  # NEW
print("Saved to:", save_dir)    # NEW