# ============================================================
# Whisper fine-tuning — Original Code + Simple LoRA (PEFT)
# ============================================================

# --- imports
import os, glob
from dataclasses import dataclass
from typing import Any, Dict, List, Union

import torch
import evaluate
from datasets import Dataset, Audio
from transformers import (
    WhisperProcessor,
    WhisperForConditionalGeneration,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
)

# >>> LoRA (PEFT) — minimal <<<
from peft import LoraConfig, get_peft_model

# =============== ENV / PATHS ===============
os.environ["CUDA_VISIBLE_DEVICES"] = "1"
AUDIO_GLOB = "/appdata/cortex/dev1/origAudio/*.mp3"

# whisper_loc = "/appdata/cortex/dev1/aptaiModels/whisper-large-v2"
whisper_loc = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"

# =============== DATASET ===============
audio_files = glob.glob(AUDIO_GLOB)

def retrieve_transcript(input_str: str) -> str:
    tmp = input_str[input_str.find("-")+1:-4]
    tmp = tmp.replace("_", " ").replace(".", " ")
    tmp = tmp.replace("shell", "she'll").replace("dont", "don't")
    tmp = tmp.capitalize().replace("i ", "I ")
    return tmp

transcripts = [retrieve_transcript(s) for s in audio_files]
num_samples = len(audio_files)

raw_datasets = Dataset.from_dict({
    "audio": audio_files[:num_samples],
    "sentence": transcripts[:num_samples],
}).cast_column("audio", Audio(sampling_rate=16_000))

raw_datasets = raw_datasets.train_test_split(test_size=0.15, seed=91)

# =============== PROCESSOR & FEATURE PREP ===============
processor = WhisperProcessor.from_pretrained(whisper_loc, language="English", task="transcribe")

def prepare_dataset(batch):
    audio = batch["audio"]
    batch["input_features"] = processor.feature_extractor(
        audio["array"], sampling_rate=audio["sampling_rate"]
    ).input_features[0]
    batch["labels"] = processor.tokenizer(batch["sentence"]).input_ids
    return batch

vectorized_datasets = raw_datasets.map(
    prepare_dataset,
    remove_columns=raw_datasets["train"].column_names,
    num_proc=8
)

# =============== LOAD MODEL ===============
model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)

# Important config
processor.tokenizer.pad_token_id = processor.tokenizer.eos_token_id
model.config.pad_token_id = processor.tokenizer.pad_token_id
if getattr(processor.tokenizer, "sot_token_id", None) is not None:
    model.config.decoder_start_token_id = processor.tokenizer.sot_token_id
model.config.forced_decoder_ids = None
model.config.suppress_tokens = []
model.config.use_cache = False
model.config.language = "english"
model.config.task = "transcribe"

# =============== SIMPLE LoRA (minimal) ===============
lora_cfg = LoraConfig(
    r=32,
    lora_alpha=64,
    lora_dropout=0.05,
    target_modules=["q_proj", "v_proj"],
    bias="none",
)
model = get_peft_model(model, lora_cfg)

# =============== COLLATOR ===============
@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_features = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(input_features, return_tensors="pt")

        label_features = [{"input_ids": f["labels"]} for f in features]
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")
        labels = labels_batch["input_ids"].masked_fill(labels_batch["attention_mask"].ne(1), -100)

        if (labels[:, 0] == self.decoder_start_token_id).all().cpu().item():
            labels = labels[:, 1:]

        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor,
    decoder_start_token_id=model.config.decoder_start_token_id,
)

# =============== METRIC ===============
metric = evaluate.load("wer")

def compute_metrics(pred):
    pred_ids = pred.predictions[0] if isinstance(pred.predictions, (tuple, list)) else pred.predictions
    label_ids = torch.tensor(pred.label_ids)
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id
    label_ids = label_ids.cpu().numpy()

    pred_str  = processor.tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)
    return {"wer": 100.0 * metric.compute(predictions=pred_str, references=label_str)}

# =============== TRAINING ARGS ===============
training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper_lora_out",
    remove_unused_columns=False,
    label_names=["labels"],
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    gradient_accumulation_steps=8,
    learning_rate=1e-5,
    warmup_steps=200,
    max_steps=1000,
    evaluation_strategy="steps",
    eval_steps=5,
    logging_steps=5,
    save_strategy="steps",
    save_total_limit=2,
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    predict_with_generate=True,
    generation_max_length=225,
    fp16=True,
    gradient_checkpointing=True,
    dataloader_num_workers=8,
    report_to=[],
)

# =============== TRAINER ===============
trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

# =============== TRAIN & SAVE ===============
trainer.train()

# Save only the LoRA adapter (small and reusable)
adapter_dir = "/appdata/cortex/dev1/shob/ASR_models/asr_finetuning/whisper_lora_adapter"
model.save_pretrained(adapter_dir)
processor.save_pretrained(adapter_dir)
print(f"Saved LoRA adapter + processor to: {adapter_dir}")