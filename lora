# =========================================================
# Distil-Whisper Large V2 — LoRA (no PEFT) fine-tuning
# RS-LoRA enabled, works on older transformers
# =========================================================
import os, glob, math, torch
import torch.nn as nn
from datasets import Dataset, Audio

# (optional) pick a GPU
os.environ["CUDA_VISIBLE_DEVICES"] = "1"
# (optional) hush advisory warnings from HF
os.environ["TRANSFORMERS_NO_ADVISORY_WARNINGS"] = "1"

# --------------------- Data prep -------------------------
audio_files = glob.glob("/appdata/cortex/dev1/origAudio/*.mp3")

def retrieve_transcript(p: str) -> str:
    tmp = p[p.rfind("/") + 1:-4]
    tmp = tmp.replace("im", "i'm").replace("shell", "she'll").replace("dont", "don't")
    tmp = tmp.capitalize().replace("i ", "I ")
    return tmp

transcripts = [retrieve_transcript(s) for s in audio_files]

raw = Dataset.from_dict({"audio": audio_files, "sentence": transcripts}).cast_column(
    "audio", Audio(sampling_rate=16000)
).train_test_split(test_size=0.15, seed=91)

# --------------------- Processor -------------------------
from transformers import WhisperProcessor
whisper_loc = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"

processor = WhisperProcessor.from_pretrained(
    whisper_loc, language="english", task="transcribe"
)
# give generate()/model an attention mask (quiet “pad==eos” warning)
processor.feature_extractor.return_attention_mask = True

def prepare_dataset(batch):
    a = batch["audio"]
    batch["input_features"] = processor.feature_extractor(
        a["array"], sampling_rate=a["sampling_rate"]
    )["input_features"][0]
    batch["labels"] = processor.tokenizer(batch["sentence"]).input_ids
    return batch

vectorized = raw.map(
    prepare_dataset,
    remove_columns=raw["train"].column_names,
    num_proc=8,
)

# --------------------- Model -----------------------------
from transformers import WhisperForConditionalGeneration, GenerationConfig

model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)

# Resolve HF config warnings/conflicts
model.config.task = "transcribe"
model.config.language = "english"
model.config.forced_decoder_ids = None
model.config.use_cache = False                     # ok with gradient checkpointing
model.config.tie_word_embeddings = False           # avoid tying conflicts when saving custom modules

# Put generation params into a GenerationConfig (future-proof)
gen = GenerationConfig.from_model_config(model.config)
gen.max_length = 448
gen.suppress_tokens = []
gen.begin_suppress_tokens = [220, 50257]
model.generation_config = gen

# Scrub any duplicates from model.config (prevents warnings on older HF)
for k in ("suppress_tokens", "begin_suppress_tokens", "max_length"):
    if hasattr(model.config, k):
        try:
            delattr(model.config, k)
        except Exception:
            setattr(model.config, k, None)

# --------------------- LoRA (no PEFT) --------------------
# RS-LoRA: scale by alpha/r and initialize B with std ~ 1/r to stabilize large-r training
class LoRALinear(nn.Module):
    def __init__(
        self,
        orig_linear: nn.Linear,
        r: int = 64,
        alpha: int = 32,
        dropout: float = 0.1,
        use_rslora: bool = True,   # <- RS-LoRA on
    ):
        super().__init__()
        self.orig = orig_linear
        self.scaling = alpha / r
        self.drop = nn.Dropout(dropout)
        self.A = nn.Linear(orig_linear.in_features, r, bias=False)
        self.B = nn.Linear(r, orig_linear.out_features, bias=False)

        # LoRA init
        nn.init.kaiming_uniform_(self.A.weight, a=math.sqrt(5))
        if use_rslora:
            # RS-LoRA style: small-N(0, 1/r) for B improves stability with larger r
            nn.init.normal_(self.B.weight, std=1.0 / r)
        else:
            nn.init.zeros_(self.B.weight)

        # freeze base
        for p in self.orig.parameters():
            p.requires_grad = False

    def forward(self, x):
        return self.orig(x) + self.B(self.A(self.drop(x))) * self.scaling

def _set_module(root, path, new):
    parts, parent = path.split("."), root
    for p in parts[:-1]:
        parent = getattr(parent, p)
    setattr(parent, parts[-1], new)

def add_lora_to_whisper(m: nn.Module, r=64, alpha=32, dropout=0.1, use_rslora=True):
    """
    Wrap ONLY safe Linear layers inside encoder/decoder blocks:
    - attention q/k/v/out
    - MLP fc1/fc2
    Skip embeddings, lm_head, and projection heads (shared/tied).
    """
    TARGET = (
        "self_attn.q_proj","self_attn.k_proj","self_attn.v_proj","self_attn.out_proj",
        "encoder_attn.q_proj","encoder_attn.k_proj","encoder_attn.v_proj","encoder_attn.out_proj",
        "fc1","fc2","mlp.fc1","mlp.fc2"
    )
    SKIP = ("embed", "lm_head", "proj_out", "project_out", "token")
    for name, mod in list(m.named_modules()):
        if isinstance(mod, nn.Linear):
            if any(s in name for s in SKIP):
                continue
            if not any(t in name for t in TARGET):
                continue
            _set_module(m, name, LoRALinear(mod, r=r, alpha=alpha, dropout=dropout, use_rslora=use_rslora))
    return m

model = add_lora_to_whisper(model, r=64, alpha=32, dropout=0.1, use_rslora=True)

# sanity check
trainable = sum(p.numel() for p in model.parameters() if p.requires_grad)
total = sum(p.numel() for p in model.parameters())
print(f"Trainable params: {trainable} / {total} ({100*trainable/total:.2f}%)")

# --------------------- Collator --------------------------
from dataclasses import dataclass
from typing import Any, Dict, List, Union

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        inp = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(
            inp, return_tensors="pt", return_attention_mask=True
        )
        # labels
        lab = [{"input_ids": f["labels"]} for f in features]
        lab_pad = self.processor.tokenizer.pad(lab, return_tensors="pt")
        labels = lab_pad["input_ids"].masked_fill(lab_pad.attention_mask.ne(1), -100)
        if (labels[:, 0] != self.decoder_start_token_id).all():
            labels = labels[:, 1:]
        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor, decoder_start_token_id=model.config.decoder_start_token_id
)

# --------------------- Metrics ---------------------------
import evaluate
metric = evaluate.load("wer")

def compute_metrics(pred):
    pred_ids = pred.predictions
    label_ids = pred.label_ids
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id
    pred_str  = processor.tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)
    return {"wer": 100 * metric.compute(predictions=pred_str, references=label_str)}

# --------------------- Training --------------------------
from transformers import Seq2SeqTrainingArguments, Seq2SeqTrainer

training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper-lora-like",
    per_device_train_batch_size=2,
    gradient_accumulation_steps=16,
    learning_rate=4.083705401062e-05,
    warmup_steps=400,
    max_steps=1000,
    gradient_checkpointing=True,          # keep; older transformers ignore kwargs param
    fp16=True,

    # (older transformers) 'evaluation_strategy' may warn but is OK
    evaluation_strategy="steps",
    per_device_eval_batch_size=4,
    predict_with_generate=True,
    generation_max_length=176,

    seed=91,
    logging_steps=5,
    eval_steps=5,
    save_steps=5,
    save_strategy="steps",
    save_total_limit=2,
    report_to=["none"],

    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,

    dataloader_num_workers=8,
    dataloader_prefetch_factor=2,
    remove_unused_columns=False,

    # Prevent shared-tensor crash when saving custom LoRA-wrapped modules
    save_safetensors=False,
)

# Silence PyTorch’s re-entrant checkpointing warning on versions that support it
try:
    model.gradient_checkpointing_enable(use_reentrant=False)
except TypeError:
    pass

trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=vectorized["train"],
    eval_dataset=vectorized["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
    # NOTE: do NOT pass generation_config= here (older transformers don't accept it)
)

# ---- Train ----
trainer.train()

# ---- Save final model + processor ----
save_dir = "/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/whisper_finetuning_Lora1"
trainer.save_model(save_dir)
processor.save_pretrained(save_dir)
print(f"Model and processor saved to {save_dir}")