# =========================
# YOUR ORIGINAL CODE (unchanged)
# =========================
import os
os.environ['CUDA_VISIBLE_DEVICES'] = "1"

from datasets import Dataset, Audio
import glob

audio_files = glob.glob("/appdata/cortex/dev1/origAudio/*.mp3")

def retrieve_transcript(input_str: str) -> str:
    tmp = input_str[input_str.find("-")+1:-4]  # strip out track number and .mp3 suffix
    tmp = tmp.replace('_', ' ')
    tmp = tmp.replace('.', ' ')
    tmp = tmp.replace("shell", "she'll")
    tmp = tmp.replace("dont", "don't")
    tmp = tmp.capitalize()
    tmp = tmp.replace(' i ', ' I ')
    return tmp

transcripts = [retrieve_transcript(s) for s in audio_files]

# Need to adjust sampling rate if necessary
num_samples = len(audio_files)

raw_datasets = Dataset.from_dict({
    "audio": audio_files[:num_samples],
    "sentence": transcripts[:num_samples]
}).cast_column("audio", Audio(sampling_rate=16_000))

raw_datasets = raw_datasets.train_test_split(test_size=0.15, seed=91)
raw_datasets
# =========================
# END OF YOUR ORIGINAL CODE
# =========================


# (kept from previous message) — accelerate compatibility shim
# >>> NEW CHANGE (ACCELERATE PATCH): define clear_device_cache if missing
try:
    from accelerate.utils import memory as _acc_mem
    if not hasattr(_acc_mem, "clear_device_cache"):
        def clear_device_cache():
            try:
                import torch
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                    torch.cuda.ipc_collect()
            except Exception:
                pass
        _acc_mem.clear_device_cache = clear_device_cache
except Exception as _patch_err:
    print("Non-fatal: could not patch accelerate.clear_device_cache:", _patch_err)
# <<< NEW CHANGE (ACCELERATE PATCH)


# ========== Whisper + LoRA pipeline ==========
import torch
from dataclasses import dataclass
from typing import Any, Dict, List, Union

from transformers import (
    WhisperProcessor,
    WhisperForConditionalGeneration,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer,
)

# 1) Load processor & model
whisper_loc = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"
processor = WhisperProcessor.from_pretrained(whisper_loc, language="English", task="transcribe")

model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
model.config.forced_decoder_ids = None
model.config.suppress_tokens = []
model.config.use_cache = False
model.config.language = "english"
model.config.task = "transcribe"

# 2) Prepare dataset → input features + labels
def prepare_dataset(batch):
    audio = batch["audio"]
    batch["input_features"] = processor.feature_extractor(
        audio["array"], sampling_rate=audio["sampling_rate"]
    ).input_features[0]
    transcription = batch["sentence"]
    batch["labels"] = processor.tokenizer(transcription).input_ids
    return batch

vectorized_datasets = raw_datasets.map(
    prepare_dataset,
    remove_columns=raw_datasets["train"].column_names,
    num_proc=8
)

# >>> NEW CHANGE (FIX KeyError 'input_features'):
# Some audio files may fail to decode, leaving examples without 'input_features'.
# We drop any bad rows and normalize dtypes so the collator never hits KeyError.
def _has_input_features(example):
    return (
        example is not None
        and "input_features" in example
        and example["input_features"] is not None
    )

for split in ["train", "test"]:
    vectorized_datasets[split] = vectorized_datasets[split].filter(_has_input_features)

# (Optional) quick sanity check — uncomment to see remaining counts
# print(vectorized_datasets)
# <<< NEW CHANGE (FIX KeyError 'input_features')


# 3) Data collator (pads inputs & labels separately)
import numpy as np

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int
    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_list = []
        for f in features:
            x = f.get("input_features", None)
            # >>> NEW CHANGE (FIX KeyError 'input_features'): robustify dtype to list/np.ndarray
            if isinstance(x, np.ndarray):
                x = x.tolist()
            if x is None:
                # if a bad sample slipped through for any reason, skip it gracefully
                continue
            input_list.append({"input_features": x})
            # <<< NEW CHANGE (FIX KeyError 'input_features')

        batch = self.processor.feature_extractor.pad(input_list, return_tensors="pt")

        label_features = [{"input_ids": f["labels"]} for f in features if "labels" in f]
        labels_batch = self.processor.tokenizer.pad(label_features, return_tensors="pt")
        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)

        if labels.size(0) > 0 and (labels[:, 0] == self.decoder_start_token_id).all().cpu().item():
            labels = labels[:, 1:]

        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor,
    decoder_start_token_id=model.config.decoder_start_token_id
)

# 4) LoRA configuration (use_rslora=True, r=64, alpha=32)
from peft import LoraConfig, get_peft_model

lora_targets = ["q_proj", "v_proj"]  # efficient targets for Whisper attention
peft_cfg = LoraConfig(
    r=64,
    lora_alpha=32,
    lora_dropout=0.05,
    bias="none",
    target_modules=lora_targets,
    task_type="SEQ_2_SEQ_LM",
    use_rslora=True
)

model = get_peft_model(model, peft_cfg)

# (Optional) show trainable param count
def print_trainable_parameters(m):
    trainable = sum(p.numel() for p in m.parameters() if p.requires_grad)
    total = sum(p.numel() for p in m.parameters())
    print(f"Trainable params: {trainable:,} / {total:,} ({100*trainable/total:.2f}%)")
print_trainable_parameters(model)

# 5) Metric (WER)
import evaluate
wer_metric = evaluate.load("wer")
def compute_metrics(pred):
    pred_ids = pred.predictions
    label_ids = pred.label_ids
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id
    pred_str  = processor.tokenizer.batch_decode(pred_ids,  skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)
    wer = 100 * wer_metric.compute(predictions=pred_str, references=label_str)
    return {"wer": wer}

# 6) Training args (unchanged from earlier example)
training_args = Seq2SeqTrainingArguments(
    output_dir="./whisper_lora_out",
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    gradient_accumulation_steps=8,
    learning_rate=1e-5,
    warmup_steps=500,
    max_steps=1000,
    fp16=True,
    gradient_checkpointing=True,
    evaluation_strategy="steps",
    eval_steps=50,
    logging_steps=25,
    save_strategy="steps",
    save_steps=200,
    save_total_limit=2,
    report_to=["none"],
    predict_with_generate=True,
    generation_max_length=225,
    seed=91,
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    dataloader_num_workers=8,
    dataloader_prefetch_factor=2,
)

# (Safety) Avoid optimizer/scheduler saving to bypass zip write errors on some filesystems
try:
    training_args.save_only_model = True
except Exception:
    pass
try:
    if not getattr(training_args, "save_only_model", False):
        from transformers.trainer import Trainer as _BaseTrainer
        def _no_save_optimizer_and_scheduler(self, output_dir):
            return
        _BaseTrainer._save_optimizer_and_scheduler = _no_save_optimizer_and_scheduler
except Exception as _e:
    print("Non-fatal: checkpoint patch failed:", _e)

# 7) Trainer & Train
trainer = Seq2SeqTrainer(
    args=training_args,
    model=model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

trainer.train()

# 8) Save adapter + processor
adapter_dir = "./whisper_lora_out/adapter"
trainer.model.save_pretrained(adapter_dir)
processor.save_pretrained(adapter_dir)

# (Optional) Merge LoRA back to base weights:
# from peft import merge_and_unload
# merged = merge_and_unload(model)
# merged.save_pretrained("./whisper_lora_out/merged_model")