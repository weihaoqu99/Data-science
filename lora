# ====== env ======
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "0,1,2,3"

# ====== (optional) accelerate shim for older versions ======
import sys, types
def _safe_clear_device_cache():
    try:
        import torch
        if torch.cuda.is_available():
            torch.cuda.empty_cache()
            try: torch.cuda.ipc_collect()
            except Exception: pass
    except Exception: pass
try:
    import importlib
    _mem = importlib.import_module("accelerate.utils.memory")
    if not hasattr(_mem, "clear_device_cache"):
        setattr(_mem, "clear_device_cache", _safe_clear_device_cache)
        print("Patched accelerate.utils.memory.clear_device_cache")
except Exception:
    mem_mod = types.ModuleType("accelerate.utils.memory")
    mem_mod.clear_device_cache = _safe_clear_device_cache
    sys.modules["accelerate.utils.memory"] = mem_mod
    print("Injected accelerate.utils.memory module with clear_device_cache")

# ====== data ======
from datasets import Dataset, Audio
import glob

audio_files = glob.glob("/appdata/cortex/dev1/origAudio/*.mp3")

def retrieve_transcript(input_str: str) -> str:
    tmp = input_str[input_str.find('/')+1:-4]  # strip out track number and .mp3 suffix
    tmp = tmp.replace('_', ' ')
    tmp = tmp.replace('.', ' ')
    tmp = tmp.replace("shell", "she'll")
    tmp = tmp.replace("dont", "don't")
    tmp = tmp.capitalize()
    tmp = tmp.replace('i ', 'I ')
    return tmp

transcripts = [retrieve_transcript(s) for s in audio_files]
num_samples = len(audio_files)

raw_datasets = Dataset.from_dict({
    "audio": audio_files[:num_samples],
    "sentence": transcripts[:num_samples],
}).cast_column("audio", Audio(sampling_rate=16_000))
raw_datasets = raw_datasets.train_test_split(test_size=0.15, seed=91)

# ====== processor ======
from transformers import WhisperProcessor
whisper_loc = "/appdata/cortex/dev1/whisper_copy/distil-large-v2"
processor = WhisperProcessor.from_pretrained(whisper_loc, language="English", task="transcribe")

def prepare_dataset(batch):
    audio = batch["audio"]
    batch["input_features"] = processor.feature_extractor(
        audio["array"], sampling_rate=audio["sampling_rate"]
    ).input_features[0]
    batch["labels"] = processor.tokenizer(batch["sentence"]).input_ids
    return batch

vectorized_datasets = raw_datasets.map(
    prepare_dataset, remove_columns=raw_datasets.column_names["train"], num_proc=8
)

# ====== model (base) ======
from transformers import WhisperForConditionalGeneration
model = WhisperForConditionalGeneration.from_pretrained(whisper_loc)
model.config.forced_decoder_ids = None
model.config.suppress_tokens = []
model.config.use_cache = False
model.config.language = "english"
model.config.task = "transcribe"

# ensure a valid decoder start token
tok = processor.tokenizer
try:
    start_id = tok.convert_tokens_to_ids("<|startoftranscript|>")
except Exception:
    start_id = None
if start_id is None or (hasattr(tok, "unk_token_id") and start_id == tok.unk_token_id):
    start_id = tok.bos_token_id
if model.config.decoder_start_token_id is None:
    model.config.decoder_start_token_id = start_id
if getattr(model, "generation_config", None) is not None:
    model.generation_config.decoder_start_token_id = start_id
    model.generation_config.forced_decoder_ids = None
    model.generation_config.suppress_tokens = []

# ====== LoRA (conservative targets for Whisper) ======
from peft import LoraConfig, get_peft_model, TaskType
lora_cfg = LoraConfig(
    r=64,
    lora_alpha=32,
    lora_dropout=0.0,          # set 0.05 if you want dropout
    bias="none",
    task_type=TaskType.SEQ_2_SEQ_LM,
    target_modules=["q_proj", "k_proj", "v_proj", "out_proj"],  # attention-only is safest
    use_rslora=False,
)
model = get_peft_model(model, lora_cfg)
model.print_trainable_parameters()

# ====== collator: always supplies decoder_input_ids ======
import torch
from dataclasses import dataclass
from typing import Any, Dict, List, Union

@dataclass
class DataCollatorSpeechSeq2SeqWithPadding:
    processor: Any
    decoder_start_token_id: int

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        # acoustic features
        input_feats = [{"input_features": f["input_features"]} for f in features]
        batch = self.processor.feature_extractor.pad(input_feats, return_tensors="pt")

        # labels -> pad & mask
        label_feats = [{"input_ids": f["labels"]} for f in features]
        labels_batch = self.processor.tokenizer.pad(label_feats, return_tensors="pt")
        labels = labels_batch["input_ids"].masked_fill(labels_batch.attention_mask.ne(1), -100)

        # explicit decoder_input_ids (shift-right)
        pad_id = self.processor.tokenizer.pad_token_id
        dec_in = labels.clone()
        dec_in[dec_in == -100] = pad_id
        dec_in = torch.cat(
            [torch.full((dec_in.size(0), 1), self.decoder_start_token_id, dtype=dec_in.dtype), dec_in[:, :-1]],
            dim=1
        )

        batch["decoder_input_ids"] = dec_in
        batch["labels"] = labels
        return batch

data_collator = DataCollatorSpeechSeq2SeqWithPadding(
    processor=processor, decoder_start_token_id=model.config.decoder_start_token_id
)

# ====== metrics ======
import evaluate
metric = evaluate.load("wer")

def compute_metrics(pred):
    pred_ids = pred.predictions
    label_ids = pred.label_ids
    label_ids[label_ids == -100] = processor.tokenizer.pad_token_id
    pred_str = processor.tokenizer.batch_decode(pred_ids, skip_special_tokens=True)
    label_str = processor.tokenizer.batch_decode(label_ids, skip_special_tokens=True)
    wer = 100 * metric.compute(predictions=pred_str, references=label_str)
    return {"wer": wer}

# ====== training args (do NOT drop columns) ======
from transformers import Seq2SeqTrainingArguments
training_args = Seq2SeqTrainingArguments(
    output_dir="./",
    per_device_train_batch_size=4,
    gradient_accumulation_steps=8,
    learning_rate=1e-5,
    warmup_steps=500,
    max_steps=1000,
    gradient_checkpointing=True,
    fp16=True,
    evaluation_strategy="steps",
    per_device_eval_batch_size=4,
    predict_with_generate=True,
    generation_max_length=225,
    seed=91,
    logging_steps=5,
    eval_steps=5,
    save_strategy="steps",
    save_steps=5,
    save_total_limit=2,
    report_to=["none"],
    load_best_model_at_end=True,
    metric_for_best_model="wer",
    greater_is_better=False,
    push_to_hub=False,
    dataloader_num_workers=8,
    dataloader_prefetch_factor=2,
    remove_unused_columns=False,   # <<< critical for Whisper + LoRA
)

# ====== trainer subclass that filters bad keys ======
from transformers import Seq2SeqTrainer
WHISPER_ALLOWED = {"input_features", "decoder_input_ids", "labels", "attention_mask", "decoder_attention_mask"}

class WhisperTrainer(Seq2SeqTrainer):
    def _prepare_inputs(self, inputs):
        inputs = super()._prepare_inputs(inputs)
        # drop anything Whisper doesn't accept (e.g., 'input_ids')
        return {k: v for k, v in inputs.items() if k in WHISPER_ALLOWED}

# (optional) quick sanity check of collator output
sample = [vectorized_datasets["train"][0]]
b = data_collator(sample)
print("Batch keys:", list(b.keys()))

# ====== train ======
trainer = WhisperTrainer(
    args=training_args,
    model=model,
    train_dataset=vectorized_datasets["train"],
    eval_dataset=vectorized_datasets["test"],
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    tokenizer=processor,
)

trainer.train()

# ====== save ======
SAVE_DIR = "/appdata/cortex/dev1/shob/ASR_model/asr_finetuning/whisper_finetuning_LoRA_r64_a32_v1"
trainer.save_model(SAVE_DIR)
processor.save_pretrained(SAVE_DIR)
print("Saved to:", SAVE_DIR)