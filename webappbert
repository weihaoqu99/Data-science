# bertscore_cli.py

import sys, os, argparse, tempfile, pandas as pd
from evaluate import load
# … any other imports …

def main(input_files, output_dir):
    os.makedirs(output_dir, exist_ok=True)

    # load the metric
    scorer = load("bertscore")
    # read input
    df = pd.read_excel(input_files[0])
    # sanity check
    for col in ("reference","candidate"):
        if col not in df.columns:
            raise ValueError(f"Excel must have '{col}' column")

    # compute
    out = scorer.compute(
      predictions= df["candidate"].apply(str).tolist(),
      references=  df["reference"].apply(str).tolist(),
      model_type="roberta-large",   # or your MODEL_PATH
      num_layers=17,
      device="cuda",
      rescale_with_baseline=True,
      baseline_path="/path/to/roberta-large.tsv",
      lang="en"
    )
    # put back in dataframe
    df["precision"] = out["precision"]
    df["recall"]    = out["recall"]
    df["f1"]        = out["f1"]

    # write exactly the same filename as in your JSON config
    output_file = os.path.join(output_dir, "Bertscore_output.xlsx")
    with pd.ExcelWriter(output_file, engine="xlsxwriter") as w:
        df.to_excel(w, sheet_name="Detailed_metrics", index=False)
        # maybe also write a model-summary sheet if your UI expects it
        # ...
    print(f"Wrote report to {output_file}")

if __name__=="__main__":
    p = argparse.ArgumentParser(description="Run BertScore batch")
    p.add_argument("--output_dir", required=True)
    p.add_argument("files", nargs="+", help="One or more input Excel files")
    args = p.parse_args()
    main(args.files, args.output_dir)