#!/usr/bin/env python
import os
import sys
import argparse
from pathlib import Path

import pandas as pd
from bert_score import BERTScorer

def main():
    # 1) parse CLI
    parser = argparse.ArgumentParser(description="Compute BERTScore metrics offline")
    parser.add_argument(
        "--output_dir",
        type=Path,
        required=True,
        help="Where to write Bertscore_output.xlsx"
    )
    parser.add_argument(
        "files",
        nargs="+",
        help="One or more .xls/.xlsx/.csv files with 'reference' & 'candidate' columns"
    )
    args = parser.parse_args()

    # 2) point Transformers at your local cache, switch to offline mode
    LOCAL_CACHE = Path("C:/Users/ZKC7HOU/Documents/4. BERT score/roberta-large")
    os.environ["TRANSFORMERS_CACHE"]   = str(LOCAL_CACHE)
    os.environ["TRANSFORMERS_OFFLINE"] = "1"

    # 3) instantiate BERTScorer with the *official* repo_id
    try:
        scorer = BERTScorer(
            lang="en",
            rescale_with_baseline=True,
            model_type="roberta-large",     # valid repo ID
            baseline_path=str(LOCAL_CACHE / "en/roberta-large.tsv"),
            num_layers=24,                  # roberta-large has 24 layers
            device="cuda" if os.getenv("CUDA_VISIBLE_DEVICES") else "cpu"
        )
    except Exception as e:
        print("ERROR: could not initialize BERTScorer:", e, file=sys.stderr)
        sys.exit(1)

    # 4) read & concat all inputs
    dfs = []
    for fn in args.files:
        p = Path(fn)
        if not p.exists():
            print(f"ERROR: file not found: {p}", file=sys.stderr)
            sys.exit(1)
        ext = p.suffix.lower()
        if ext in (".xls", ".xlsx"):
            dfs.append(pd.read_excel(p))
        elif ext == ".csv":
            dfs.append(pd.read_csv(p))
        else:
            print(f"ERROR: unsupported file type: {ext}", file=sys.stderr)
            sys.exit(1)
    if not dfs:
        print("ERROR: no data loaded", file=sys.stderr)
        sys.exit(1)
    df = pd.concat(dfs, ignore_index=True)

    # 5) validate required columns
    for col in ("reference", "candidate"):
        if col not in df.columns:
            print(f"ERROR: missing required column '{col}'", file=sys.stderr)
            sys.exit(1)

    # 6) compute sentence-level metrics
    P, R, F1 = scorer.score(
        cands=df["candidate"].astype(str).tolist(),
        refs=[[r] for r in df["reference"].astype(str).tolist()]
    )
    df["precision"] = [round(min(max(x,0.0),1.0),6) for x in P.tolist()]
    df["recall"]    = [round(min(max(x,0.0),1.0),6) for x in R.tolist()]
    df["f1"]        = [round(min(max(x,0.0),1.0),6) for x in F1.tolist()]

    # 7) write out the result Excel
    out_dir = args.output_dir
    out_dir.mkdir(parents=True, exist_ok=True)
    output_fp = out_dir / "Bertscore_output.xlsx"
    df.to_excel(output_fp, index=False)

    # 8) success line for Flask to capture
    print(f"✔️ Report saved to: {output_fp.resolve()}")

if __name__ == "__main__":
    main()