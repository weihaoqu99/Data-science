#!/usr/bin/env python
import os
import sys
import argparse
from pathlib import Path

import pandas as pd
from bert_score import BERTScorer

def main():
    # 1) Parse CLI exactly like your other scripts
    parser = argparse.ArgumentParser(description="Compute BERTScore metrics")
    parser.add_argument(
        "--output_dir",
        type=Path,
        required=True,
        help="Directory in which to write Bertscore_output.xlsx"
    )
    parser.add_argument(
        "files",
        nargs="+",
        help="One or more .xls/.xlsx/.csv files with 'reference' & 'candidate' columns"
    )
    args = parser.parse_args()

    # 2) Load the scorer for roberta-large (this is a valid repo_id)
    #    It will pull from your local cache if you have it, or download if you have internet.
    try:
        scorer = BERTScorer(
            lang="en",
            rescale_with_baseline=True,
            model_type="roberta-large",   # use the standard ID, not a Windows path
            num_layers=24,                # roberta-large has 24 layers
            device="cuda" if os.getenv("CUDA_VISIBLE_DEVICES") else "cpu"
        )
    except Exception as e:
        print("ERROR: could not initialize BERTScorer('roberta-large'):", e, file=sys.stderr)
        sys.exit(1)

    # 3) Read & concatenate all input files
    dfs = []
    for fn in args.files:
        p = Path(fn)
        if not p.exists():
            print(f"ERROR: file not found: {p}", file=sys.stderr)
            sys.exit(1)
        ext = p.suffix.lower()
        if ext in (".xls", ".xlsx"):
            dfs.append(pd.read_excel(p))
        elif ext == ".csv":
            dfs.append(pd.read_csv(p))
        else:
            print(f"ERROR: unsupported file type: {ext}", file=sys.stderr)
            sys.exit(1)

    if not dfs:
        print("ERROR: no data loaded", file=sys.stderr)
        sys.exit(1)
    df = pd.concat(dfs, ignore_index=True)

    # 4) Validate required columns
    for col in ("reference", "candidate"):
        if col not in df.columns:
            print(f"ERROR: missing required column '{col}'", file=sys.stderr)
            sys.exit(1)

    # 5) Compute per‐sentence BERTScore
    P, R, F1 = scorer.score(
        cands=df["candidate"].astype(str).tolist(),
        refs=[[r] for r in df["reference"].astype(str).tolist()]
    )

    df["precision"] = [round(min(max(x, 0.0), 1.0), 6) for x in P.tolist()]
    df["recall"]    = [round(min(max(x, 0.0), 1.0), 6) for x in R.tolist()]
    df["f1"]        = [round(min(max(x, 0.0), 1.0), 6) for x in F1.tolist()]

    # 6) Write the single-sheet Excel that your webapp expects
    out_dir = args.output_dir
    out_dir.mkdir(parents=True, exist_ok=True)
    out_fp = out_dir / "Bertscore_output.xlsx"
    df.to_excel(out_fp, index=False)

    # 7) One line of stdout so Flask sees success
    print(f"✔️ Report saved to: {out_fp.resolve()}")

if __name__ == "__main__":
    main()