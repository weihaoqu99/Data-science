def objective(trial):
    # Suggested hyperparameters
    batch_size = trial.suggest_categorical("batch_size", [4, 8, 16])
    learning_rate = trial.suggest_float("learning_rate", 1e-5, 5e-4, log=True)
    num_train_epochs = trial.suggest_int("num_train_epochs", 5, 15)
    weight_decay = trial.suggest_float("weight_decay", 0.0, 0.3)
    label_smoothing = trial.suggest_float("label_smoothing", 0.0, 0.2)
    warmup_ratio = trial.suggest_float("warmup_ratio", 0.0, 0.3)
    dropout = trial.suggest_float("dropout", 0.0, 0.3)

    # Optional LoRA tuning
    lora_r = trial.suggest_categorical("lora_r", [4, 8, 16, 32])
    lora_alpha = trial.suggest_categorical("lora_alpha", [16, 32, 64, 128])

    config = LoraConfig(
        r=lora_r,
        lora_alpha=lora_alpha,
        target_modules=["q", "k", "v", "o"],
        task_type="SEQ_2_SEQ_LM",
        bias="none"
    )

    lora_model = get_peft_model(base_madlad400, config)

    args = Seq2SeqTrainingArguments(
        output_dir=f"models/optuna_trial_{trial.number}",
        evaluation_strategy="epoch",
        save_strategy="epoch",
        logging_strategy="steps",
        logging_steps=50,
        eval_steps=100,
        save_total_limit=1,
        learning_rate=learning_rate,
        per_device_train_batch_size=batch_size,
        per_device_eval_batch_size=batch_size,
        num_train_epochs=num_train_epochs,
        weight_decay=weight_decay,
        label_smoothing_factor=label_smoothing,
        warmup_ratio=warmup_ratio,
        predict_with_generate=True,
        generation_max_length=128,
        generation_num_beams=4,
        report_to="none",
        load_best_model_at_end=True,
        metric_for_best_model="bleu",
        greater_is_better=True
    )

    trainer = Seq2SeqTrainer(
        model=lora_model,
        args=args,
        train_dataset=tokenized_train_dataset,
        eval_dataset=tokenized_validation_dataset,
        data_collator=data_collator,
        tokenizer=base_madlad400_tokenizer,
        compute_metrics=compute_metrics
    )

    trainer.train()
    predictions = trainer.predict(tokenized_validation_dataset)
    return predictions.metrics.get("test_BLEU", 0.0)