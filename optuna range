def objective(trial):
    batch_size       = trial.suggest_categorical('batch_size', [4, 8, 16, 32])
    learning_rate    = trial.suggest_float('learning_rate', 2e-5, 2e-1, log=True)
    num_train_epochs = trial.suggest_int('num_train_epochs', low=7, high=15)
    weight_decay     = trial.suggest_loguniform('weight_decay', 4e-3, 1e-1)

    args = Seq2SeqTrainingArguments(
        output_dir="models/checkpoint_g.optuna_V2",
        eval_steps=100,
        evaluation_strategy="epoch",
        learning_rate=learning_rate,
        per_device_train_batch_size=batch_size,
        per_device_eval_batch_size=batch_size,
        weight_decay=weight_decay,
        save_total_limit=1,
        num_train_epochs=num_train_epochs,
        predict_with_generate=True
    )

    trainer = Seq2SeqTrainer(
        model=model_name,
        args=args,
        train_dataset=tokenized_train_dataset,
        eval_dataset=tokenized_validation_dataset,
        data_collator=data_collator,
        tokenizer=base_madlad400_tokenizer,
        compute_metrics=compute_metrics,
    )

    trainer.train()
    predictions = trainer.predict(tokenized_validation_dataset)
    print("â–¶ Predictions:", predictions.metrics)

    # Use 'BLEU' instead of 'test_BLEU' based on your compute_metrics function
    return predictions.metrics.get('BLEU', 0)